{"version":3,"file":"component---src-pages-histogram-tsx-2cdf32585a3579f14f6a.js","mappings":"mIAGO,MAAMA,E,KAAaC,QAAOC,IAAG,gEAAVD,CAAU,oG,mFCYpC,MAmFME,EAAsB,CAC1BC,KAAM,CACJ,CAAC,EAAG,IACJ,CAAC,GAAI,KACL,CAAC,IAAK,MAERC,OAAQ,CACN,CACEF,KAAM,CAAC,IAAK,IAAM,MAClBG,MAAO,cAKPC,EAA0B,CAC9BC,KAAM,OACNC,QAAS,EACTC,eAAgB,OAChBC,OAAQ,OACRC,cAAe,EACfC,YAAa,EACbC,QAAS,QAGLC,EAAkB,CACtBC,EAAG,CACDC,OAAQ,EACRC,MAAO,IACFX,EACHC,KAAM,OACNG,OAAQ,OACRC,cAAe,GACfC,YAAa,GAEfM,MAAO,EACPL,SAAS,GAEXM,EAAG,CACDF,MAAO,IACFX,EACHC,KAAM,OACNG,OAAQ,OACRC,cAAe,GACfC,YAAa,GAEfM,MAAO,EACPL,SAAS,IAwCb,UApCyBO,KACvB,MAAOC,EAAKC,IAASC,EAAAA,EAAAA,IAAS,OAC9B,OACEC,EAAAA,cAACC,EAAAA,EAAM,KACLD,EAAAA,cAAAA,KAAAA,KAAI,mBACJA,EAAAA,cAACzB,EAAAA,EAAU,KACTyB,EAAAA,cAAAA,MAAAA,CAAKH,IAAKA,GACRG,EAAAA,cAACE,EAAAA,GAAS,CACRC,UAAW,CACTC,SAAU,KAEZC,WAAY,EAAC,GAAM,GACnBC,eAAgBC,IAAc,IAAb,KAAEC,GAAM,EACvB,OACER,EAAAA,cAAAA,IAAAA,CAAGS,UAAU,qBACXT,EAAAA,cAAAA,IAAAA,KACEA,EAAAA,cAAAA,SAAAA,CAAQU,GAAI,GAAIC,EAAG,EAAG5B,KAAK,QAC3BiB,EAAAA,cAAAA,OAAAA,CAAMY,GAAG,MAAMJ,EAAKK,aAEpB,EAGRC,UAAWC,EAAAA,GAAgBC,WAC3BtC,KAAMA,EACNc,OAAQ,IACRF,KAAMA,EACN2B,sBAAuBC,EAAAA,GAAkBF,WACzClB,MAAOA,KAGXE,EAAAA,cAACmB,EAAAA,EAAO,CAACC,YAnKG,qkDAqKP,C","sources":["webpack://docs2/./src/components/TwoColumns.tsx","webpack://docs2/./src/pages/histogram.tsx"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const TwoColumns = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  @media (max-width: 640px) {\n    grid-template-columns: 1fr;\n  }\n`;\n","import React from \"react\";\n\nimport {\n  EChartDirection,\n  ELabelOrientation,\n  GridProps,\n  Histogram,\n  HistogramData,\n  SVGLineStyle,\n  useWidth,\n} from \"../../../src\";\nimport { JSXCode } from \"../components/JSXCode\";\nimport { Layout } from \"../components/Layout\";\nimport { TwoColumns } from \"../components/TwoColumns\";\n\nconst exampleCode = `import {\n  EChartDirection,\n  ELabelOrientation,\n  Histogram,\n  IGrid,\n  HistogramData,\n  SVGLineStyle,\n  useWidth,\n} from 'cl-react-graph;\n\nconst data: HistogramData = {\n  bins: [[0, 50], [50, 150], [150, 300]],\n  counts: [\n    {\n      data: [500, 2000, 1500],\n      label: 'Baseline',\n    },\n  ]\n}\n\nconst lineStyle: SVGLineStyle = {\n  fill: '#000',\n  opacity: 1,\n  shapeRendering: 'auto',\n  stroke: '#000',\n  strokeOpacity: 1,\n  strokeWidth: 1,\n  visible: 'true',\n};\n\nconst grid: IGrid = {\n  x: {\n    height: 1,\n    style: {\n      ...lineStyle,\n      fill: 'none',\n      stroke: '#bbb',\n      strokeOpacity: 0.7,\n      strokeWidth: 1,\n    },\n    ticks: 5,\n    visible: true,\n  },\n  y: {\n    style: {\n      ...lineStyle,\n      fill: 'none',\n      stroke: '#bbb',\n      strokeOpacity: 0.7,\n      strokeWidth: 5,\n    },\n    ticks: 5,\n    visible: true,\n  },\n};\n\nconst MyComponent = () => {\n  const [ref, width] = useWidth('90%');\n\n  return (\n    <div ref={ref}>\n      <Histogram\n        animation={{\n          duration: 300,\n        }}\n        showLabels={[true, true]}\n        LabelComponent={({ item }) => {\n          return <g transform=\"translate(0, -10)\"><g>\n            <circle dy={10} r={4} fill=\"red\"></circle>\n            <text dx=\"10\">{item.percentage}</text></g>\n          </g>;\n        }}\n        direction={EChartDirection.HORIZONTAL}\n        data={data}\n        height={400}\n        grid={grid}\n        xAxisLabelOrientation={ELabelOrientation.HORIZONTAL}\n        width={width} />\n    </div>\n  )\n};\n`;\n\nconst data: HistogramData = {\n  bins: [\n    [0, 50],\n    [50, 150],\n    [150, 300],\n  ],\n  counts: [\n    {\n      data: [500, 2000, 1500],\n      label: \"Baseline\",\n    },\n  ],\n};\n\nconst lineStyle: SVGLineStyle = {\n  fill: \"#000\",\n  opacity: 1,\n  shapeRendering: \"auto\",\n  stroke: \"#000\",\n  strokeOpacity: 1,\n  strokeWidth: 1,\n  visible: \"true\",\n};\n\nconst grid: GridProps = {\n  x: {\n    height: 1,\n    style: {\n      ...lineStyle,\n      fill: \"none\",\n      stroke: \"#bbb\",\n      strokeOpacity: 0.7,\n      strokeWidth: 1,\n    },\n    ticks: 5,\n    visible: true,\n  },\n  y: {\n    style: {\n      ...lineStyle,\n      fill: \"none\",\n      stroke: \"#bbb\",\n      strokeOpacity: 0.7,\n      strokeWidth: 5,\n    },\n    ticks: 5,\n    visible: true,\n  },\n};\n\nconst HistogramExample = () => {\n  const [ref, width] = useWidth(\"90%\");\n  return (\n    <Layout>\n      <h2>Histogram Chart</h2>\n      <TwoColumns>\n        <div ref={ref}>\n          <Histogram\n            animation={{\n              duration: 300,\n            }}\n            showLabels={[true, true]}\n            LabelComponent={({ item }) => {\n              return (\n                <g transform=\"translate(0, -10)\">\n                  <g>\n                    <circle dy={10} r={4} fill=\"red\"></circle>\n                    <text dx=\"10\">{item.percentage}</text>\n                  </g>\n                </g>\n              );\n            }}\n            direction={EChartDirection.HORIZONTAL}\n            data={data}\n            height={400}\n            grid={grid}\n            xAxisLabelOrientation={ELabelOrientation.HORIZONTAL}\n            width={width}\n          />\n        </div>\n        <JSXCode exampleCode={exampleCode} />\n      </TwoColumns>\n    </Layout>\n  );\n};\n\nexport default HistogramExample;\n"],"names":["TwoColumns","styled","div","data","bins","counts","label","lineStyle","fill","opacity","shapeRendering","stroke","strokeOpacity","strokeWidth","visible","grid","x","height","style","ticks","y","HistogramExample","ref","width","useWidth","React","Layout","Histogram","animation","duration","showLabels","LabelComponent","_ref","item","transform","dy","r","dx","percentage","direction","EChartDirection","HORIZONTAL","xAxisLabelOrientation","ELabelOrientation","JSXCode","exampleCode"],"sourceRoot":""}