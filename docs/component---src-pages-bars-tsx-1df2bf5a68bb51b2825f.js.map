{"version":3,"file":"component---src-pages-bars-tsx-1df2bf5a68bb51b2825f.js","mappings":"mIAGO,MAAMA,E,KAAaC,QAAOC,IAAG,gEAAVD,CAAU,oG,6FCapC,MAyGME,EAAqB,CACzBC,KAAM,CAAC,SAAU,OAAQ,SACzBC,OAAQ,CACN,CACEF,KAAM,CAAC,MAAO,MAAO,OACrBG,MAAO,YAET,CACEH,KAAM,CAAC,IAAO,MAAO,KACrBG,MAAO,cAKPC,EAAS,CACb,CACEC,kBAAmB,aACnBC,MAAO,CACL,CAAEC,OAAQ,KAAMC,UAAWC,EAAAA,EAAMC,UACjC,CAAEH,OAAQ,MAAOC,UAAWC,EAAAA,EAAME,YAGtC,CACEL,MAAO,CACL,CAAEC,OAAQ,KAAMC,UAAWC,EAAAA,EAAMG,eACjC,CAAEL,OAAQ,MAAOC,UAAWC,EAAAA,EAAMI,kBAyExC,UApEoBC,KAClB,MAAOC,EAAKC,IAASC,EAAAA,EAAAA,IAAS,OACxBC,EAAcC,EAAAA,GAAkBC,QAChCC,GAASC,EAAAA,EAAAA,IAAmB,CAChCJ,YAAaA,EACbjB,KAAMD,EAAKC,KACXsB,OAAQvB,EAAKE,OACbsB,WAAY,KAGd,OACEC,EAAAA,cAACC,EAAAA,EAAM,KACLD,EAAAA,cAAAA,KAAAA,KAAI,QACJA,EAAAA,cAAC5B,EAAAA,EAAU,KACT4B,EAAAA,cAAAA,MAAAA,CAAKV,IAAKA,GACRU,EAAAA,cAACE,EAAAA,GAAI,CAACX,MAAOA,EAAOY,OAAQ,KAC1BH,EAAAA,cAACI,EAAAA,GAAI,CACH5B,KAAMD,EAAKC,KACX6B,YAAa,CAACrB,EAAAA,EAAMsB,SAAUtB,EAAAA,EAAMuB,eACpCC,UAAWC,EAAAA,GAAgBC,WAC3Bd,OAAQA,EACRH,YAAaA,EACbU,OAAQ,IACRQ,WAAY,EAAC,GAAM,GACnBb,OAAQvB,EAAKE,OACbc,MAAOA,KAIXS,EAAAA,cAAAA,KAAAA,KAAI,wBACJA,EAAAA,cAAAA,IAAAA,KAAG,6HAIHA,EAAAA,cAACY,EAAAA,EAAO,CAACC,YAjHK,6pBAmHdb,EAAAA,cAAAA,KAAAA,KAAI,iBACJA,EAAAA,cAAAA,IAAAA,KAAG,oHAIHA,EAAAA,cAAAA,IAAAA,KAAG,8FAIHA,EAAAA,cAACY,EAAAA,EAAO,CAACC,YAhGQ,sZAiGjBb,EAAAA,cAAAA,IAAAA,KACEA,EAAAA,cAACE,EAAAA,GAAI,CAACX,MAAOA,EAAOY,OAAQ,KAC1BH,EAAAA,cAACI,EAAAA,GAAI,CACH5B,KAAMD,EAAKC,KACX6B,YAAa1B,EACb6B,UAAWC,EAAAA,GAAgBC,WAC3Bd,OAAQA,EACRH,YAAaA,EACbU,OAAQ,IACRQ,WAAY,EAAC,GAAM,GACnBb,OAAQvB,EAAKE,OACbc,MAAOA,OAKfS,EAAAA,cAACY,EAAAA,EAAO,CAACC,YArMG,woCAuMP,C","sources":["webpack://docs2/./src/components/TwoColumns.tsx","webpack://docs2/./src/pages/bars.tsx"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const TwoColumns = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  @media (max-width: 640px) {\n    grid-template-columns: 1fr;\n  }\n`;\n","import React from \"react\";\n\nimport {\n  BarChartData,\n  Bars,\n  Base,\n  EChartDirection,\n  EGroupedBarLayout,\n  useHistogramDomain,\n  useWidth,\n} from \"../../../src\";\nimport { JSXCode } from \"../components/JSXCode\";\nimport { Layout } from \"../components/Layout\";\nimport { TwoColumns } from \"../components/TwoColumns\";\nimport { theme } from \"../context/theme\";\n\nconst exampleCode = `import {\n  Bars,\n  Base,\n  EChartDirection,\n  EGroupedBarLayout,\n  BarChartData,\n  useHistogramDomain,\n  useWidth,\n} from 'cl-react-graph;\n\nconst data: BarChartData = {\n  bins: ['Female', 'Male', 'Other'],\n  counts: [\n    {\n      data: [79200, 52400, 13300],\n      label: 'Baseline',\n    },\n    {\n      data: [60000, 34230, 10000],\n      label: 'Filtered',\n    },\n  ],\n};\n\nconst MyComponent = () => {\n  const [ref, width] = useWidth('90%');\n  const groupLayout = EGroupedBarLayout.GROUPED;\n  const domain = useHistogramDomain({\n    groupLayout: groupLayout,\n    bins: data.bins,\n    values: data.counts,\n    tickValues: [],\n  });\n\n  return (\n    <div ref={ref}>\n      <Base\n        width={width}\n        height={220}>\n        <BarsComponent\n          bins={data.bins}\n          colorScheme={[theme.green900, theme.brightBlue800]}\n          direction={EChartDirection.HORIZONTAL}\n          domain={domain}\n          groupLayout={groupLayout}\n          height={200}\n          showLabels={[true, true]}\n          values={data.counts}\n          width={width}\n          />\n      </Base>\n    </div>\n  )\n};\n`;\n\nconst customLabelCode = `\nimport { TLabelComponent, EChartDirection } from 'cl-react-graph';\n\nconst CustomLabel: TLabelComponent = ({direction, inverse, fill, label, item}) => {\n  const offset = direction === EChartDirection.VERTICAL\n  ? '0, -5'\n  : inverse ? '-5, 0' : '5, 0';\nconst textAnchor = direction === EChartDirection.VERTICAL\n  ? 'middle'\n  : inverse ? 'end' : 'left';\nreturn (\n  <g transform={\\`translate(\\${offset})\\`}\n    role=\"cell\">\n    <text textAnchor={textAnchor}\n      fill={fill}\n      fontSize=\"1rem\">{\n        label ?? \\`\\${Math.round(Number(item.percentage))}%\\`}\n    </text>\n  </g>\n)\n}\n\n  <Bars\n    ...\n    LabelComponent={CustomLabel}\n  />\n`;\n\nconst colorSchemeExample = `\nconst scheme = [\n  {\n    gradientTransform: 'rotate(90)',\n    stops: [\n      { offset: \"5%\", stopColor: theme.green700 },\n      { offset: \"95%\", stopColor: theme.green500 },\n    ],\n  },\n  {\n    stops: [\n      { offset: \"5%\", stopColor:  theme.brightBlue700 },\n      { offset: \"95%\", stopColor:  theme.brightBlue300 },\n    ],\n  },\n]\n  <Bars\n    ...\n    colorScheme={scheme}\n  />\n`;\nconst data: BarChartData = {\n  bins: [\"Female\", \"Male\", \"Other\"],\n  counts: [\n    {\n      data: [79200, 52400, 13300],\n      label: \"Baseline\",\n    },\n    {\n      data: [60000, 34230, 10000],\n      label: \"Filtered\",\n    },\n  ],\n};\n\nconst scheme = [\n  {\n    gradientTransform: \"rotate(90)\",\n    stops: [\n      { offset: \"5%\", stopColor: theme.green700 },\n      { offset: \"95%\", stopColor: theme.green500 },\n    ],\n  },\n  {\n    stops: [\n      { offset: \"5%\", stopColor: theme.brightBlue700 },\n      { offset: \"95%\", stopColor: theme.brightBlue300 },\n    ],\n  },\n];\n\nconst BarsExample = () => {\n  const [ref, width] = useWidth(\"90%\");\n  const groupLayout = EGroupedBarLayout.GROUPED;\n  const domain = useHistogramDomain({\n    groupLayout: groupLayout,\n    bins: data.bins,\n    values: data.counts,\n    tickValues: [],\n  });\n\n  return (\n    <Layout>\n      <h2>Bars</h2>\n      <TwoColumns>\n        <div ref={ref}>\n          <Base width={width} height={220}>\n            <Bars\n              bins={data.bins}\n              colorScheme={[theme.green900, theme.brightBlue800]}\n              direction={EChartDirection.HORIZONTAL}\n              domain={domain}\n              groupLayout={groupLayout}\n              height={200}\n              showLabels={[true, true]}\n              values={data.counts}\n              width={width}\n            />\n          </Base>\n\n          <h3>Using a custom label</h3>\n          <p>\n            The label assigned after each bar can be customized with a new\n            component. In the example below we increase its font size:\n          </p>\n          <JSXCode exampleCode={customLabelCode} />\n\n          <h3>Color Schemes</h3>\n          <p>\n            The colorScheme prop is an array of items. Each bin item will be\n            filled with the corresponding color scheme item\n          </p>\n          <p>\n            Each item can be a string representing a solid fill, or an object to\n            specify a linear fill\n          </p>\n          <JSXCode exampleCode={colorSchemeExample} />\n          <p>\n            <Base width={width} height={120}>\n              <Bars\n                bins={data.bins}\n                colorScheme={scheme}\n                direction={EChartDirection.HORIZONTAL}\n                domain={domain}\n                groupLayout={groupLayout}\n                height={100}\n                showLabels={[true, true]}\n                values={data.counts}\n                width={width}\n              />\n            </Base>\n          </p>\n        </div>\n        <JSXCode exampleCode={exampleCode} />\n      </TwoColumns>\n    </Layout>\n  );\n};\n\nexport default BarsExample;\n"],"names":["TwoColumns","styled","div","data","bins","counts","label","scheme","gradientTransform","stops","offset","stopColor","theme","green700","green500","brightBlue700","brightBlue300","BarsExample","ref","width","useWidth","groupLayout","EGroupedBarLayout","GROUPED","domain","useHistogramDomain","values","tickValues","React","Layout","Base","height","Bars","colorScheme","green900","brightBlue800","direction","EChartDirection","HORIZONTAL","showLabels","JSXCode","exampleCode"],"sourceRoot":""}