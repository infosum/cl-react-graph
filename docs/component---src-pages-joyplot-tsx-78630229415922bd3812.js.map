{"version":3,"file":"component---src-pages-joyplot-tsx-78630229415922bd3812.js","mappings":"mIAGO,MAAMA,E,KAAaC,QAAOC,IAAG,gEAAVD,CAAU,oG,6FCKpC,MA0DME,EAAO,CACX,CACEC,KAAM,CAAC,UAAW,aAAc,eAChCC,OAAQ,CACN,CACEC,MAAO,wBACPH,KAAM,CAAC,IAAK,IAAK,OAGrBI,MAAO,MAET,CACEH,KAAM,CAAC,UAAW,aAAc,eAChCC,OAAQ,CACN,CACEC,MAAO,yBACPH,KAAM,CAAC,IAAK,IAAK,QAGrBI,MAAO,QA4BX,UAxBuBC,KACrB,MAAOC,EAAKC,IAASC,EAAAA,EAAAA,IAAS,OAC9B,OACEC,EAAAA,cAACC,EAAAA,EAAM,KACLD,EAAAA,cAAAA,KAAAA,KAAI,WAEJA,EAAAA,cAACZ,EAAAA,EAAU,KACTY,EAAAA,cAAAA,MAAAA,CAAKH,IAAKA,GACRG,EAAAA,cAAAA,KAAAA,KAAI,uBACJA,EAAAA,cAACE,EAAAA,GAAO,CACNX,KAAMA,EACNI,MAAM,sBACNQ,YAAa,GACbC,YAAa,CAACC,EAAAA,EAAMC,UACpBR,MAAOA,EACPS,OAAsB,IAAdhB,EAAKiB,UAGjBR,EAAAA,cAACS,EAAAA,EAAO,CAACC,YAnGG,u4BAqGP,C","sources":["webpack://docs2/./src/components/TwoColumns.tsx","webpack://docs2/./src/pages/joyplot.tsx"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const TwoColumns = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  @media (max-width: 640px) {\n    grid-template-columns: 1fr;\n  }\n`;\n","import React from \"react\";\n\nimport { JoyPlot, useWidth } from \"../../../src\";\nimport { JSXCode } from \"../components/JSXCode\";\nimport { Layout } from \"../components/Layout\";\nimport { TwoColumns } from \"../components/TwoColumns\";\nimport { theme } from \"../context/theme\";\n\nconst exampleCode = `import {\n  JoyPlot,\n  useWidth,\n} from 'cl-react-graph;\n\n\nconst data = [\n  {\n    'bins': [\n      '0, 2500',\n      '2500, 5000',\n      '5000, 10000'\n    ],\n    'counts': [\n      {\n        'label': 'in market for car: No',\n        'data': [\n          500,\n          400,\n          4000\n        ]\n      }\n    ],\n  },\n  {\n    'bins': [\n      '0, 2500',\n      '2500, 5000',\n      '5000, 10000'\n    ],\n    'counts': [\n      {\n        'label': 'in market for car: Yes',\n        'data': [\n          300,\n          300,\n          2800\n        ]\n      }\n    ],\n  }\n]\n\nconst MyComponent = () => {\n  const [ref, width] = useWidth('90%');\n  return(\n    <div ref={ref}>\n      <JoyPlot\n        data={data}\n        xAxisHeight={20}\n        colorScheme=\"hsla(140, 60%, 88%, 1)\"\n        width={width}\n        height={data.length * 150} />\n    </div>\n  )\n};\n`;\n\nconst data = [\n  {\n    bins: [\"0, 2500\", \"2500, 5000\", \"5000, 10000\"],\n    counts: [\n      {\n        label: \"in market for car: No\",\n        data: [500, 400, 4000],\n      },\n    ],\n    title: \"No\",\n  },\n  {\n    bins: [\"0, 2500\", \"2500, 5000\", \"5000, 10000\"],\n    counts: [\n      {\n        label: \"in market for car: Yes\",\n        data: [300, 300, 2800],\n      },\n    ],\n    title: \"Yes\",\n  },\n];\n\nconst JoyPlotExample = () => {\n  const [ref, width] = useWidth(\"90%\");\n  return (\n    <Layout>\n      <h2>JoyPlot</h2>\n\n      <TwoColumns>\n        <div ref={ref}>\n          <h3>In market for a car</h3>\n          <JoyPlot\n            data={data}\n            title=\"In market for a car\"\n            xAxisHeight={20}\n            colorScheme={[theme.green900]}\n            width={width}\n            height={data.length * 150}\n          />\n        </div>\n        <JSXCode exampleCode={exampleCode} />\n      </TwoColumns>\n    </Layout>\n  );\n};\n\nexport default JoyPlotExample;\n"],"names":["TwoColumns","styled","div","data","bins","counts","label","title","JoyPlotExample","ref","width","useWidth","React","Layout","JoyPlot","xAxisHeight","colorScheme","theme","green900","height","length","JSXCode","exampleCode"],"sourceRoot":""}