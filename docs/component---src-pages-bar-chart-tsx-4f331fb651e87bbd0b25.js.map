{"version":3,"file":"component---src-pages-bar-chart-tsx-4f331fb651e87bbd0b25.js","mappings":"2MAqHaA,EAA2B,CACtCC,EAAG,CACDC,MAAO,SACPC,aAAc,MACdC,iBAAkBC,EAAAA,GAAAA,YAEpBC,EAAG,CACDH,aAAc,MACdC,iBAAkBC,EAAAA,GAAAA,aAIhBE,EAAsB,CAC1BC,KAAM,CAAC,SAAU,OAAQ,SACzBC,OAAQ,CACN,CACEF,KAAM,CAAC,MAAO,MAAO,OACrBG,MAAO,YAET,CACEH,KAAM,CAAC,MAAO,MAAO,KACrBG,MAAO,cAKPC,EAA2B,CAC/BC,KAAM,OACNC,QAAS,EACTC,eAAgB,OAChBC,OAAQ,OACRC,cAAe,EACfC,YAAa,EACbC,SAAS,GAGLC,EAAc,CAClBlB,EAAG,CACDmB,OAAQ,EACRC,MAAO,OAAF,UACAV,EADA,CAEHC,KAAM,OACNG,OAAQ,OACRC,cAAe,GACfC,YAAa,IAEfK,MAAO,EACPJ,SAAS,GAEXZ,EAAG,CACDe,MAAO,OAAF,UACAV,EADA,CAEHC,KAAM,OACNG,OAAQ,OACRC,cAAe,GACfC,YAAa,IAEfK,MAAO,EACPJ,SAAS,IAkCb,UA7BwB,WACtB,OAAqBK,EAAAA,EAAAA,IAAS,OAAvBC,EAAP,KAAYC,EAAZ,KACA,OACE,gBAAC,IAAD,KACE,uCACA,gBAAC,IAAD,KACE,uBAAKD,IAAKA,GACR,gBAAC,KAAD,CACEE,UAAW,CACTC,SAAU,KAEZC,WAAY,EAAC,GAAO,GACpBC,UAAWC,EAAAA,GAAAA,WACXvB,KAAMA,EACNa,OAAQ,IACRW,WAAY,CAAC,EAAG,IAAO,OACvBZ,KAAMA,EACNa,YAAa,CAACC,EAAAA,EAAAA,cAAqBA,EAAAA,EAAAA,UACnCC,YAAaC,EAAAA,GAAAA,QACbC,sBAAuB/B,EAAAA,GAAAA,WACvBoB,MAAOA,KAGX,gBAAC,IAAD,CAASY,YAxLG","sources":["webpack://docs2/./src/pages/bar-chart.tsx"],"sourcesContent":["import React from 'react';\n\nimport {\n  BarChart,\n  EChartDirection,\n  EGroupedBarLayout,\n  ELabelOrientation,\n  IAxes,\n  IBarChartData,\n  useWidth,\n} from '../../../src';\nimport { IGrid } from '../../../src/Histogram';\nimport { ISVGLineStyle } from '../../../src/legacy/types';\nimport { DeepPartial } from '../../../src/utils/types';\nimport { JSXCode } from '../components/JSXCode';\nimport { Layout } from '../components/Layout';\nimport { TwoColumns } from '../components/TwoColumns';\nimport { theme } from '../context/theme';\n\nconst exampleCode = `import {\n  BarChart,\n  EChartDirection,\n  EGroupedBarLayout,\n  ELabelOrientation,\n  IAxes,\n  IBarChartData,\n  useWidth,\n} from 'cl-react-graph;\n\n\nexport const axis: DeepPartial<IAxes> = {\n  x: {\n    scale: 'linear',\n    numberFormat: '.2s',\n    labelOrientation: ELabelOrientation.HORIZONTAL,\n  },\n  y: {\n    numberFormat: '.2s',\n    labelOrientation: ELabelOrientation.HORIZONTAL,\n  },\n};\n\nconst data: IBarChartData = {\n  bins: ['Female', 'Male', 'Other'],\n  counts: [\n    {\n      data: [58483, 52400, 13300],\n      label: 'Baseline',\n    },\n    {\n      data: [54932, 34230, 10000],\n      label: 'Filtered',\n    },\n  ]\n}\n\nexport const lineStyle: ISVGLineStyle = {\n  'fill': '#000',\n  'opacity': 1,\n  'shapeRendering': 'auto',\n  'stroke': '#000',\n  'strokeOpacity': 1,\n  'strokeWidth': 1,\n  'visible': true,\n};\n\nconst grid: IGrid = {\n  x: {\n    height: 1,\n    style: {\n      ...lineStyle,\n      'fill': 'none',\n      'stroke': '#bbb',\n      'strokeOpacity': 0.7,\n      'strokeWidth': 1,\n    },\n    ticks: 5,\n    visible: true,\n  },\n  y: {\n    style: {\n      ...lineStyle,\n      'fill': 'none',\n      'stroke': '#bbb',\n      'strokeOpacity': 0.7,\n      'strokeWidth': 5,\n    },\n    ticks: 5,\n    visible: true,\n  },\n};\n\nconst MyComponent = () => {\n  const [ref, width] = useWidth('90%');\n\n  return (\n    <div ref={ref}>\n    <BarChart\n      animation={{\n        duration: 800,\n      }}\n      showLabels={[false, true]}\n      direction={EChartDirection.HORIZONTAL}\n      data={data}\n      height={400}\n      tickValues={[0, 40000, 89200]}\n      grid={grid}\n      colorScheme={[theme.brightBlue800, theme.green900]}\n      groupLayout={EGroupedBarLayout.GROUPED}\n      xAxisLabelOrientation={ELabelOrientation.HORIZONTAL}\n      width={width}\n    />\n  </div>\n  )\n}\n`;\n\nexport const axis: DeepPartial<IAxes> = {\n  x: {\n    scale: 'linear',\n    numberFormat: '.2s',\n    labelOrientation: ELabelOrientation.HORIZONTAL,\n  },\n  y: {\n    numberFormat: '.2s',\n    labelOrientation: ELabelOrientation.HORIZONTAL,\n  },\n};\n\nconst data: IBarChartData = {\n  bins: ['Female', 'Male', 'Other'],\n  counts: [\n    {\n      data: [58483, 52400, 13300],\n      label: 'Baseline',\n    },\n    {\n      data: [54932, 34230, 10000],\n      label: 'Filtered',\n    },\n  ]\n}\n\nconst lineStyle: ISVGLineStyle = {\n  fill: '#000',\n  opacity: 1,\n  shapeRendering: 'auto',\n  stroke: '#000',\n  strokeOpacity: 1,\n  strokeWidth: 1,\n  visible: true,\n};\n\nconst grid: IGrid = {\n  x: {\n    height: 1,\n    style: {\n      ...lineStyle,\n      fill: 'none',\n      stroke: '#bbb',\n      strokeOpacity: 0.7,\n      strokeWidth: 1,\n    },\n    ticks: 5,\n    visible: true,\n  },\n  y: {\n    style: {\n      ...lineStyle,\n      fill: 'none',\n      stroke: '#bbb',\n      strokeOpacity: 0.7,\n      strokeWidth: 5,\n    },\n    ticks: 5,\n    visible: true,\n  },\n};\n\n\nconst BarChartExample = () => {\n  const [ref, width] = useWidth('90%');\n  return (\n    <Layout>\n      <h2>Bar Chart</h2>\n      <TwoColumns>\n        <div ref={ref}>\n          <BarChart\n            animation={{\n              duration: 800,\n            }}\n            showLabels={[false, true]}\n            direction={EChartDirection.HORIZONTAL}\n            data={data}\n            height={400}\n            tickValues={[0, 40000, 89200]}\n            grid={grid}\n            colorScheme={[theme.brightBlue800, theme.green900]}\n            groupLayout={EGroupedBarLayout.GROUPED}\n            xAxisLabelOrientation={ELabelOrientation.HORIZONTAL}\n            width={width}\n          />\n        </div>\n        <JSXCode exampleCode={exampleCode} />\n      </TwoColumns>\n    </Layout>\n  )\n}\n\nexport default BarChartExample;\n"],"names":["axis","x","scale","numberFormat","labelOrientation","ELabelOrientation","y","data","bins","counts","label","lineStyle","fill","opacity","shapeRendering","stroke","strokeOpacity","strokeWidth","visible","grid","height","style","ticks","useWidth","ref","width","animation","duration","showLabels","direction","EChartDirection","tickValues","colorScheme","theme","groupLayout","EGroupedBarLayout","xAxisLabelOrientation","exampleCode"],"sourceRoot":""}